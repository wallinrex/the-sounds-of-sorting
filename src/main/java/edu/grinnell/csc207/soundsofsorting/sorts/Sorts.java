package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> void bubbleSort(T[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if (arr[j].compareTo(arr[j+1]) > 0) {
                    swap(arr, j, j + 1);
                }
            }
        }
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> void selectionSort(
            T[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j].compareTo(arr[minIndex]) < 0) {
                    minIndex = j;
                }
            }
            swap (arr, i, minIndex);
        }
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> void insertionSort(
            T[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i; j > 0; j--) {
                if (arr[j].compareTo(arr[j-1]) < 0) {
                    swap(arr, j, j - 1);
                }
            }
        }
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> void mergeSort(
            T[] arr) {
        T[] scratch = Arrays.copyOf(arr, arr.length);
        mergeSort(arr, scratch, 0, arr.length);
    }

    private static <T extends Comparable<? super T>> void mergeSort(
            T[] arr, T[] scratch, int lo, int hi) {
        if (hi <= lo + 1) {
            return;
        }
        int mid = (hi - lo) / 2 + lo;
        mergeSort(arr, scratch, lo, mid);
        mergeSort(arr, scratch, mid, hi);
        merge(arr, scratch, lo, mid, hi);
    }

    private static <T extends Comparable<? super T>> void merge(
            T[] arr, T[] scratch, int lo, int mid, int hi) {
        int i = lo;
        int j = mid;
        int k = 0;
        while (i < mid && j < hi) {
            if (arr[i].compareTo(arr[j]) < 0) {
                scratch[k] = arr[i];
                i++;
            } else {
                scratch[k] = arr[j];
                j++;
            }
            k++;
        }
        if (i == mid) {
            while (j < hi) {
                scratch[k] = arr[j];
                j++;
                k++;
            }
        } else {
            while (i < mid) {
                scratch[k] = arr[i];
                i++;
                k++;
            }
        }
        for (int s = lo, t = 0; s < hi; s++, t++) {
            arr[s] = scratch[t];
        }
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     * List<SortEvent<Integer>>
     */
    public static <T extends Comparable<? super T>> void quickSort(T[] arr) {
        quickSort(arr, 0, arr.length);
    }

    private static <T extends Comparable<? super T>> void quickSort(
            T[] arr, int lo, int hi) {
        if (hi <= lo + 1) {
            return;
        }
        if (hi == lo + 2) {
            if (arr[lo].compareTo(arr[lo+1]) > 0) {
                swap(arr, lo, lo + 1);
            }
            return;
        }
        int mid = (hi - lo) / 2 + lo;
        int pivotIndex = medianIndex(arr, lo, mid, hi - 1);
        T pivot = arr[pivotIndex];
        swap(arr, hi - 1, pivotIndex);
        int i = lo;
        int j = hi - 2;
        while (j > i) {
            if (arr[i].compareTo(pivot) > 0) {
                if (arr[j].compareTo(pivot) < 0) {
                    swap(arr, i, j);
                } else {
                    j--;
                }
            } else {
                i++;
            }
        }
        swap(arr, hi - 1, i);
        quickSort(arr, lo, i);
        quickSort(arr, i + 1, hi);
    }

    private static <T extends Comparable<? super T>> int medianIndex(
            T[] arr, int lo, int mid, int hi) {
        T[] temp = Arrays.copyOf(arr, 3);
        temp[0] = arr[lo];
        temp[1] = arr[mid];
        temp[2] = arr[hi];
        selectionSort(temp);
        if (temp[1] == arr[lo]) {
            return lo;
        } else if (temp[1] == arr[mid]) {
            return mid;
        } else {
            return hi;
        }
    }

    /**
     * Sorts the array according to the gnome sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     * List<SortEvent<Integer>>
     */
    public static <T extends Comparable<? super T>> void gnomeSort(T[] arr) {
        int i = 0;
        while (i < arr.length) {
            if (i == 0 || arr[i].compareTo(arr[i-1]) >= 0) {
                i++;
            } else {
                swap(arr, i, i - 1);
                i--;
            }
        }
    }

    <T> void eventSort(T[] l, List<SortEvent<T>> events) {
        Iterator<SortEvent<T>> iter = events.iterator();
        while (iter.hasNext()) {
            iter.next().apply(l);
        }
    }
}
